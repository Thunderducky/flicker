:: Debug[script]
(() => {
  window.enableDebug = function(){
    console.log('Debug not allowed');
  };
  if(!window.location.search.includes('debug')) {
    return;
  }
  const GUI = lil.GUI;

  

  // Recursively handle everything in a list
  function addObjAsFolderToGUI(folder, obj, listen = false) {
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        const element = obj[key];
        if (typeof element === 'object') {
          const newFolder = folder.addFolder(key);
          addObjAsFolderToGUI(newFolder, element, listen);
        } else {
          const item = folder.add(obj, key);
          if(listen);
          item.listen();
        }
      }
    }
  }
  const ps = (a) => JSON.parse(JSON.stringify(a));
  window.enableDebug = function(){
    const gui = new GUI();
    const title = gui.addFolder('Title');
    // addObjAsFolderToGUI(story, window.story);
    // const passage = gui.addFolder('Passage');
    // addObjAsFolderToGUI(passage, window.passage);
    const base = gui.addFolder('Story State');
    const topLevel = {
      passageName: "",
      reload: () => {
        window.story.show(window.passage.id, true);
      }
    };
    const passageName = title.add(topLevel, 'passageName');
    $(document).on('sm.passage.showing', function(event, {passage}) {
      passageName.setValue(passage.name);
    });
    // Add a listener that will update the debug view when the story passage changes

    base.add(topLevel, 'reload'); 
    addObjAsFolderToGUI(base, window.story.state, true);
  };
})();