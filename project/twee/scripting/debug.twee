:: Debug[script]
(() => {
  window.enableDebug = function(){
    console.log('Debug not allowed');
  };
  if(!window.location.search.includes('debug')) {
    return;
  }
  const GUI = lil.GUI;

  

  // Recursively handle everything in a list
  function addObjAsFolderToGUI(folder, obj, listen = false) {
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        const element = obj[key];
        if (typeof element === 'object' && typeof element !== 'function') {
          const newFolder = folder.addFolder(key);
          addObjAsFolderToGUI(newFolder, element, listen);
        } else {
          const item = folder.add(obj, key);
          if(listen);
          item.listen();
        }
      }
    }
  }
  window.enableDebug = function(){
    const gui = new GUI();
    const title = gui.addFolder('Title');
    // addObjAsFolderToGUI(story, window.story);
    // const passage = gui.addFolder('Passage');
    // addObjAsFolderToGUI(passage, window.passage);
    const base = gui.addFolder('Story State');
    const topLevel = {
      passageName: "",
      go: () => {
        window.story.show(topLevel.passageName);
      },
      save: () => {
        localStorage.setItem('retain', 'true');
        localStorage.setItem('story', JSON.stringify(window.story.state));
      },
      clear: () => {
        localStorage.removeItem('retain');
        localStorage.removeItem('story');
      },
      reload: () => {
        window.story.show(window.passage.id, true);
      }
    };
    const passages = window.story.passages;
    const jumpTargets = window.story.passages.filter(p => !!p).map(p => p.name).reduce((acc, cur) => {
        acc[cur] = () => window.story.show(cur);
        return acc;
      }, {});
    const jumpTo = base.addFolder('Jump To');
    addObjAsFolderToGUI(jumpTo, jumpTargets);

    const passageName = title.add(topLevel, 'passageName');
    title.add(topLevel, 'go');
    title.add(topLevel, 'save');
    title.add(topLevel, 'clear');
    $(document).on('sm.passage.showing', function(event, {passage}) {
      passageName.setValue(passage.name);
    });
    // Add a listener that will update the debug view when the story passage changes

    base.add(topLevel, 'reload'); 
    addObjAsFolderToGUI(base, window.story.state, true);
  };
})();